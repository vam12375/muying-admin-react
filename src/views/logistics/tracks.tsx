import React, { useState, useEffect, useRef } from 'react';
import { 
  Timeline, 
  Card, 
  Button, 
  Form, 
  Input, 
  DatePicker, 
  Select, 
  Modal, 
  message, 
  Typography,
  Spin,
  Empty,
  Divider,
  Progress,
  Space,
  Alert,
  Collapse,
  Tag,
  Tooltip
} from 'antd';
import { 
  PlusOutlined, 
  ThunderboltOutlined, 
  EnvironmentOutlined, 
  UserOutlined, 
  InfoCircleOutlined,
  ClockCircleOutlined 
} from '@ant-design/icons';
import { useDispatch, useSelector } from 'react-redux';
import dayjs from 'dayjs';
import type { AppDispatch, RootState } from '@/store';
import { 
  fetchLogisticsTracks,
  addLogisticsTrackAction,
  updateLogisticsStatusAction,
  batchAddLogisticsTracksAction
} from '@/store/slices/logisticsSlice';
import type { LogisticsTrack, LogisticsTrackParams } from '@/api/logistics';
import { formatDateTime } from '@/utils/dateUtils';

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;
const { Panel } = Collapse;

interface LogisticsTracksProps {
  logisticsId: number | string;
  readOnly?: boolean;
}

const LogisticsTracks: React.FC<LogisticsTracksProps> = ({ logisticsId, readOnly = false }) => {
  const dispatch = useDispatch<AppDispatch>();
  
  // 从Redux获取状态
  const { tracks, loading } = useSelector((state: RootState) => ({
    tracks: state.logistics.tracks,
    loading: state.logistics.loading.tracks || state.logistics.loading.action
  }));
  
  // 本地状态
  const [modalVisible, setModalVisible] = useState(false);
  const [form] = Form.useForm();
  
  // 自动生成轨迹状态
  const [autoGenerating, setAutoGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  
  // 重试相关状态
  const [retryCount, setRetryCount] = useState(0);
  const [retryStep, setRetryStep] = useState(-1);
  const MAX_RETRIES = 3; // 最大重试次数
  
  // 初始加载
  useEffect(() => {
    if (logisticsId) {
      dispatch(fetchLogisticsTracks(logisticsId));
    }
  }, [dispatch, logisticsId]);
  
  // 轨迹模板 - 模拟物流运输过程
  const trackTemplates = [
    {
      status: 'SHIPPING',
      content: '快件已从仓库发出，正在运往分拣中心',
      location: '发货仓库'
    },
    {
      status: 'SHIPPING',
      content: '快件已到达分拣中心，正在分拣',
      location: '分拣中心'
    },
    {
      status: 'SHIPPING',
      content: '快件已从分拣中心发出，正在运往配送站',
      location: '分拣中心'
    },
    {
      status: 'SHIPPING',
      content: '快件已到达配送站，等待配送',
      location: '配送站'
    },
    {
      status: 'DELIVERED',
      content: '快件已被签收，感谢您使用我们的服务',
      location: '收货地址'
    }
  ];
  
  // 开始自动生成轨迹
  const startAutoGeneration = () => {
    if (autoGenerating) return;
    
    // 首先确保轨迹列表已加载
    if (!logisticsId) {
      message.error('缺少物流ID，无法自动生成轨迹');
      return;
    }
    
    // 检查是否已有轨迹
    if (tracks && tracks.length > 0) {
      Modal.confirm({
        title: '已存在物流轨迹',
        content: '当前物流已存在轨迹记录，继续自动生成可能会导致重复数据。是否继续？',
        okText: '继续',
        cancelText: '取消',
        onOk: () => {
          batchGenerateTracks();
        }
      });
    } else {
      batchGenerateTracks();
    }
  };
  
  // 批量生成轨迹
  const batchGenerateTracks = async () => {
    setAutoGenerating(true);
    setGenerationProgress(10); // 初始进度
    
    try {
      // 准备所有轨迹数据
      const allTracks = trackTemplates.map((template, index) => {
        // 计算相对时间，第一个点是当前时间，后续每个点间隔30分钟
        const trackingTime = dayjs().add(index * 30, 'minute').format('YYYY-MM-DD HH:mm:ss');
        
        // 创建详情JSON数据
        const detailsJson: Record<string, any> = {
          type: 'autoGenerated',
          stepIndex: index,
          templateName: `step_${index + 1}`,
          generatedAt: new Date().toISOString(),
          isLast: index === trackTemplates.length - 1,
          additionalInfo: {
            batchGenerated: true,
            totalSteps: trackTemplates.length,
          }
        };
        
        // 对于特定状态添加额外信息
        if (template.status === 'DELIVERED') {
          detailsJson.deliveryInfo = {
            isDelivered: true,
            deliveryMethod: 'standard',
            requiresSignature: true
          };
        }
        
        return {
          trackingTime,
          status: template.status,
          location: template.location,
          content: template.content,
          operator: 'System',
          detailsJson
        };
      });
      
      setGenerationProgress(30); // 数据准备完成
      
      console.log(`准备批量生成${allTracks.length}个轨迹点`);
      message.loading('正在批量生成物流轨迹...', 2);
      
      // 调用批量创建API
      await dispatch(batchAddLogisticsTracksAction({ 
        logisticsId, 
        tracks: allTracks 
      })).unwrap();
      
      setGenerationProgress(90);
      
      // 如果最后一个状态是已送达，更新物流状态
      if (trackTemplates[trackTemplates.length - 1].status === 'DELIVERED') {
        await updateLogisticsStatusIfNeeded('DELIVERED');
      }
      
      setGenerationProgress(100);
      message.success('物流轨迹批量生成成功');
    } catch (error: any) {
      console.error('批量生成轨迹失败:', error);
      
      // 显示错误信息
      Modal.error({
        title: '生成失败',
        content: `批量生成轨迹失败: ${error.message || '未知错误'}`,
      });
    } finally {
      setAutoGenerating(false);
    }
  };
  
  // 更新物流状态（如有需要）
  const updateLogisticsStatusIfNeeded = async (status: string) => {
    try {
      await dispatch(updateLogisticsStatusAction({
        id: logisticsId,
        status,
        remark: '系统自动更新：物流已完成送达'
      })).unwrap();
    } catch (error) {
      message.error('更新物流状态失败');
    }
  };
  
  // 添加物流轨迹
  const handleAddTrack = () => {
    form.resetFields();
    form.setFieldsValue({
      trackingTime: dayjs(),
      status: 'SHIPPING'
    });
    setModalVisible(true);
  };
  
  // 处理表单提交
  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      
      // 转换日期格式
      const track: LogisticsTrackParams = {
        ...values,
        trackingTime: values.trackingTime ? values.trackingTime.format('YYYY-MM-DD HH:mm:ss') : undefined
      };
      
      await dispatch(addLogisticsTrackAction({ logisticsId, track })).unwrap();
      setModalVisible(false);
    } catch (error) {
      // 表单验证失败
    }
  };
  
  // 获取状态标签颜色
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'CREATED':
        return 'orange';
      case 'SHIPPING':
        return 'blue';
      case 'DELIVERED':
        return 'green';
      case 'EXCEPTION':
        return 'red';
      default:
        return 'gray';
    }
  };
  
  // 添加故障排除指南组件
  const TroubleshootingGuide = () => {
    return (
      <div style={{ marginTop: 16 }}>
        <Divider>故障排除指南</Divider>
        <Collapse ghost>
          <Panel header="自动生成物流轨迹失败的常见原因" key="1">
            <ol>
              <li><strong>网络问题</strong>：确保您的网络连接稳定，可以尝试刷新页面后重试。</li>
              <li><strong>权限不足</strong>：您可能没有添加物流轨迹的权限，请联系系统管理员。</li>
              <li><strong>数据异常</strong>：物流信息可能存在问题，尝试检查物流信息是否完整。</li>
              <li><strong>后端服务问题</strong>：后端服务可能暂时不可用，请稍后重试。</li>
              <li><strong>API调用频率限制</strong>：尝试减少API调用频率，等待一段时间后再试。</li>
            </ol>
          </Panel>
          <Panel header="如何手动添加物流轨迹？" key="2">
            <p>如果自动生成不工作，您可以通过以下步骤手动添加物流轨迹：</p>
            <ol>
              <li>点击"添加轨迹"按钮</li>
              <li>填写轨迹信息，包括时间、状态、地点和内容</li>
              <li>点击"确定"保存轨迹</li>
            </ol>
            <p>注意：确保按照正确的顺序添加轨迹，以便客户能够看到准确的物流进度。</p>
          </Panel>
        </Collapse>
      </div>
    );
  };
  
  // 添加新的CSS样式到组件
  const styles = `
    .timeline-content-container {
      background-color: #f5f7fa;
      padding: 10px;
      border-radius: 4px;
      margin-bottom: 8px;
    }
    
    .timeline-status {
      margin-bottom: 6px;
    }
    
    .timeline-text {
      margin-bottom: 4px;
      line-height: 1.5;
    }
    
    .timeline-location, .timeline-operator {
      font-size: 12px;
      margin-top: 4px;
    }
    
    /* 第一个时间线项目突出显示 */
    .ant-timeline-item:first-child .timeline-content-container {
      background-color: rgba(103, 194, 58, 0.1);
      border-left: 3px solid #67c23a;
    }
  `;

  // 添加样式到文档头部
  useEffect(() => {
    const styleElement = document.createElement('style');
    styleElement.innerHTML = styles;
    document.head.appendChild(styleElement);
    
    return () => {
      document.head.removeChild(styleElement);
    };
  }, []);
  
  return (
    <div className="logistics-tracks-container">
      {!readOnly && (
        <div className="tracks-actions" style={{ marginBottom: 16 }}>
          <Space>
            <Button 
              type="primary" 
              onClick={handleAddTrack}
              icon={<PlusOutlined />}
            >
              添加轨迹
            </Button>
            <Button
              type="primary"
              onClick={startAutoGeneration}
              loading={autoGenerating}
              icon={<ThunderboltOutlined />}
              danger
            >
              自动生成轨迹
            </Button>
          </Space>
          
          {autoGenerating && (
            <div style={{ marginTop: 16 }}>
              <Progress percent={generationProgress} status="active" />
            </div>
          )}
          
          <Collapse ghost style={{ marginTop: 16 }}>
            <Panel header="查看物流轨迹自动生成帮助" key="1">
              <TroubleshootingGuide />
            </Panel>
          </Collapse>
        </div>
      )}
      
      {/* 轨迹时间线 */}
      <div className="tracks-timeline">
        {loading ? (
          <div style={{ textAlign: 'center', padding: '20px 0' }}>
            <Spin size="large" tip="加载中..." />
          </div>
        ) : tracks && tracks.length > 0 ? (
          <Timeline
            mode="left"
            items={tracks.map((track) => ({
              color: getStatusColor(track.status),
              children: (
                <div key={track.id} className="track-item">
                  <div className="track-time">
                    <ClockCircleOutlined /> {formatDateTime(track.trackingTime)}
                  </div>
                  <div className="track-content">
                    <Text strong>{track.content}</Text>
                  </div>
                  <div className="track-info">
                    {track.location && (
                      <div className="track-location">
                        <EnvironmentOutlined /> {track.location}
                      </div>
                    )}
                    {track.operator && (
                      <div className="track-operator">
                        <UserOutlined /> {track.operator}
                      </div>
                    )}
                    {track.detailsJson && (
                      <div className="track-details">
                        <Tooltip title="该轨迹包含扩展信息">
                          <InfoCircleOutlined />
                        </Tooltip>
                      </div>
                    )}
                  </div>
                </div>
              )
            }))}
          />
        ) : (
          <Empty description="暂无物流轨迹" />
        )}
      </div>
      
      {/* 添加轨迹模态框 */}
      <Modal
        title="添加物流轨迹"
        visible={modalVisible}
        onOk={handleSubmit}
        onCancel={() => setModalVisible(false)}
        confirmLoading={loading}
      >
        <Form
          form={form}
          layout="vertical"
        >
          <Form.Item
            name="trackingTime"
            label="轨迹时间"
            rules={[{ required: true, message: '请选择轨迹时间' }]}
          >
            <DatePicker 
              showTime 
              format="YYYY-MM-DD HH:mm:ss" 
              style={{ width: '100%' }}
              placeholder="选择轨迹时间"
            />
          </Form.Item>
          
          <Form.Item
            name="status"
            label="物流状态"
            rules={[{ required: true, message: '请选择物流状态' }]}
          >
            <Select placeholder="选择物流状态">
              <Option value="CREATED">已创建</Option>
              <Option value="SHIPPING">运输中</Option>
              <Option value="DELIVERED">已送达</Option>
              <Option value="EXCEPTION">异常</Option>
            </Select>
          </Form.Item>
          
          <Form.Item
            name="location"
            label="当前位置"
          >
            <Input placeholder="输入当前位置" />
          </Form.Item>
          
          <Form.Item
            name="content"
            label="轨迹内容"
            rules={[{ required: true, message: '请输入轨迹内容' }]}
          >
            <TextArea rows={4} placeholder="输入轨迹内容" />
          </Form.Item>
          
          <Form.Item
            name="operator"
            label="操作人"
          >
            <Input placeholder="输入操作人" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default LogisticsTracks; 